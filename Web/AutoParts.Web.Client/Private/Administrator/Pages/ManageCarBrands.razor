@page "/manage-car-brands"

@inject Services.CarBrandsManagerService carBrandsManagerService
@inject Public.Car.Services.CarBrandService carBrandService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager

@using Protos;
@using Models;
@using Shared.Utils;
@using Blazor.FileReader;


<div class="d-flex mb-3">
    <h2 class="flex-grow-1">
        Car brands manager
    </h2>

    <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseForm" aria-expanded="false" aria-controls="collapseForm">
        <span class="oi oi-plus" aria-hidden="true"></span> Create new car brand
    </button>
</div>

<div class="collapse mb-3" id="collapseForm">
    <div class="card card-body">
        <EditForm class="col-md-3" Model="@formModel" OnValidSubmit="HandleCreateCarBrand">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="my-3 alert-danger">
                    @ErrorMessage
                </div>
            }

            <DataAnnotationsValidator />

            <div class="text-left">
                <ValidationSummary />
            </div>

            <InputText id="email" class="form-control mb-2" placeholder="Car brand name" @bind-Value="formModel.Name" />

            <div class="input-group mb-3">
                <div class="custom-file">
                    <input type="file"
                           id="inputGroupFile01"
                           class="custom-file-input"
                           @ref=dropTargetInput
                           @onchange="OnInputChange" />
                    <label class="custom-file-label" for="inputGroupFile01">@GetFileInputLabelText()</label>
                </div>
            </div>

            <button class="btn btn-md btn-primary btn-block mt-3" type="submit">
                Submit
            </button>
        </EditForm>
    </div>
</div>

@if (Loading)
{
    <p class="font-italic">Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Car brand name</th>
                <th scope="col">Car brand models</th>
                <th scope="col">Car brand image</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var carBrand in CarBrands)
            {
                <tr>
                    <th scope="row">
                        @carBrand.Id
                    </th>
                    <td>
                        @carBrand.Name
                    </td>
                    <td>
                        <a class="btn btn-info" href="manage-car-models/@carBrand.Id">
                            <span class="oi oi-external-link" aria-hidden="true"></span> Manage car brand models
                        </a>
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(carBrand.ImageUrl))
                        {
                            <a class="btn btn-info" href="@carBrand.ImageUrl" target="_blank">
                                <span class="oi oi-external-link" aria-hidden="true"></span> Show image
                            </a>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                        </button>
                        <button class="btn btn-danger" @onclick="() => HandleDeleteCarBrand(carBrand.Id)">
                            <span class="oi oi-trash" aria-hidden="true"></span> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private CarBrandFormModel formModel = new CarBrandFormModel();
    private ElementReference dropTargetInput;
    private IFileReaderRef inputFileReference;

    protected bool Loading { get; set; } = true;
    protected string ErrorMessage { get; set; }
    protected CarBrand[] CarBrands { get; set; }
    protected List<IFileInfo> InputFileList { get; set; } = new List<IFileInfo>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCarBrands();
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        if (isFirstRender)
        {
            inputFileReference = fileReaderService.CreateReference(dropTargetInput);
        }
    }

    protected async Task HandleCreateCarBrand()
    {
        if (InputFileList.Any())
        {

            var files = await FileUtility.ReadFilesAsync(inputFileReference);
            var file = files.First();

            formModel.ImageFileInfo = file.Key;
            formModel.ImageBuffer = file.Value;
        }

        await carBrandsManagerService.CreateCarBrand(formModel);

        formModel = new CarBrandFormModel();
        UpdateFileInputReference();

        await LoadCarBrands();

    }

    protected async Task HandleDeleteCarBrand(long carBrandId)
    {
        await carBrandsManagerService.DeleteCarBrand(carBrandId);

        await LoadCarBrands();
    }

    protected async Task LoadCarBrands()
    {
        Loading = true;

        CarBrands = await carBrandService.GetCarBrands();

        Loading = false;
    }

    private void UpdateFileInputReference()
    {
        StateHasChanged();

        InputFileList.Clear();

        inputFileReference = fileReaderService.CreateReference(dropTargetInput);
    }

    public async Task OnInputChange(EventArgs e)
    {
        StateHasChanged();

        await RefreshFileList(inputFileReference, InputFileList);
    }

    private string GetFileInputLabelText()
    {
        if (InputFileList.Any())
        {
            return InputFileList.First().Name;
        }

        return "Choose car brand image";
    }

    private async Task RefreshFileList(IFileReaderRef reader, List<IFileInfo> list)
    {
        list.Clear();

        foreach (var file in await reader.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            list.Add(fileInfo);
        }

        StateHasChanged();
    }
}