@using Protos;
@using Models;
@using Shared.Utils; 

@inject NavigationManager navigationManager

<div class="jumbotron py-4">
    <div class="mb-4 d-flex">
        <h4 class="mb-0 flex-fill">
            Filters
        </h4>

        <button class="btn btn-outline-primary" @onclick="ApplyFilter">Apply filters</button>
    </div>

    <div class="mb-4">
        <h5 class="mb-2">Sort by:</h5>
        <SelectAutoPartsSortingComponent SelectedSortingOption="Filter.Sorting" OnItemChosen="HandleAutoPartSortingChosen"></SelectAutoPartsSortingComponent>
    </div>

    <div class="mb-4">
        <h5 class="mb-2">Car modification:</h5>
        <SelectAutoPartsCarModificationComponent SelectedCarModificationId="Filter.CarModificationId" OnItemChosen="HandleAutoPartCarModificationChosen"></SelectAutoPartsCarModificationComponent>
    </div>

    <div class="mb-4">
        <h5 class="mb-2">Origin country:</h5>
        <SelectAutoPartsCountry SelectedCountryId="Filter.CountryId" OnItemChosen="HandleAutoPartCountryChosen"></SelectAutoPartsCountry>
    </div>

    <div class="mb-4">
        <h5 class="mb-2">Availability:</h5>
        <div class="custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="available-only" checked="@Filter.AvailableOnly" @onchange="HandleAvailableOnlyFilterChanged">
            <label class="custom-control-label" for="available-only">Show available only</label>
        </div>
    </div>

    <div class="mb-4">
        <h5 class="mb-2">Category:</h5>
        <SelectAutoPartsCatalogComponent SelectedSubCatalogId="Filter.SubCatalogId" OnItemChosen="HandleAutoPartCatalogChosen"></SelectAutoPartsCatalogComponent>
    </div>

    <button class="btn btn-outline-primary btn-block" @onclick="ApplyFilter">Apply filters</button>
</div>

@code {
    protected AutoPartsFilter Filter { get; set; }

    protected override void OnInitialized()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        Filter = QueryParsingUtility.ParseFilterFromUri<AutoPartsFilter>(uri);
    }

    private void HandleAutoPartSortingChosen(AutoPartsSortingOption option)
    {
        Filter.Sorting = option;
    }

    private void HandleAutoPartCarModificationChosen(CarModification carModification)
    {
        if (carModification == null)
        {
            Filter.CarModificationId = default;
        }
        else
        {
            Filter.CarModificationId = carModification.Id;
        }
    }

    private void HandleAutoPartCatalogChosen(Catalog catalog)
    {
        if (catalog == null)
        {
            Filter.SubCatalogId = default;
        }
        else
        {
            Filter.SubCatalogId = catalog.Id;
        }
    }

    private void HandleAutoPartCountryChosen(Country country)
    {
        if (country == null)
        {
            Filter.CountryId = default;
        }
        else
        {
            Filter.CountryId = country.Id;
        }
    }

    private void HandleAvailableOnlyFilterChanged(ChangeEventArgs eventArgs)
    {
        var showAvailableOnly = (bool)eventArgs.Value;
        Filter.AvailableOnly = showAvailableOnly;
    }

    private void ApplyFilter()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var currentFilter = QueryParsingUtility.ParseFilterFromUri<AutoPartsFilter>(uri);

        Filter.SearchText = currentFilter.SearchText;

        var query = QueryBuilderUtility.CreateQueryFromFilter("auto-parts", Filter);

        navigationManager.NavigateTo(query);
    }
}
