@inject Services.CarBrandService carBrandService
@inject Services.CarModelService carModelService
@inject Services.CarModificationService carModificationService

@using Protos;

<div class="my-4 mx-0 py-5 jumbotron row">
    @if (Loading)
    {
        <p class="font-italic">Loading...</p>
    }
    else if (SelectedCarBrand == null || LoadingCarModels)
    {
        <SelectCarBrandComponent CarBrands="CarBrands" OnItemChosen="HandleCarBrandChosen"></SelectCarBrandComponent>
    }
    else if (SelectedCarModel == null || LoadingCarModifications)
    {
        <button class="btn btn-outline-dark mb-4" @onclick="() => SelectedCarBrand = null">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to the car brands list
        </button>

        <SelectCarModelComponent CarBrand="SelectedCarBrand" CarModels="SelectedCarBrandModels" OnItemChosen="HandleCarModelChosen"></SelectCarModelComponent>
    }
    else
    {
        <button class="btn btn-outline-dark mb-4" @onclick="() => SelectedCarModel = null">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back to the car models list
        </button>

        @foreach (var carModification in SelectedCarModelModifications)
        {
            <p>@carModification.Name</p>
        }
    }
</div>

@code {
    private bool Loading { get; set; } = true;
    private bool LoadingCarModels { get; set; } = true;
    private bool LoadingCarModifications { get; set; } = true;
    private CarBrand[] CarBrands { get; set; }
    private CarBrand SelectedCarBrand { get; set; }
    private CarModel[] SelectedCarBrandModels { get; set; }
    private CarModel SelectedCarModel { get; set; }
    private CarModification[] SelectedCarModelModifications { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        CarBrands = await carBrandService.GetCarBrands();

        Loading = false;
    }

    private async Task HandleCarBrandChosen(CarBrand carBrand)
    {
        LoadingCarModels = true;

        SelectedCarBrand = carBrand;

        SelectedCarBrandModels = await carModelService.GetCarModels(carBrand.Id);

        LoadingCarModels = false;
    }

    private async Task HandleCarModelChosen(CarModel carModel)
    {
        LoadingCarModifications = true;

        SelectedCarModel = carModel;

        SelectedCarModelModifications = await carModificationService.GetCarModifications(carModel.Id);

        LoadingCarModifications = false;
    }
}
